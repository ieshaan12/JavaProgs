					/* Exception */
/*Sources-
https://www.javatpoint.com/exception-handling-in-java


*/
In Java, an exception is an event that disrupts the normal flow of the program. It is an object which is thrown at runtime.

Advantage of Exception Handling
	The core advantage of exception handling is to maintain the normal flow of the application. An exception normally disrupts the normal flow of the 
	application that is why we use exception handling.

There are mainly two types of exceptions: 
	checked and unchecked. Here, an error is considered as the unchecked exception. According to Oracle, there are three types of exceptions:

	1. Checked Exception-The classes which directly inherit Throwable class except RuntimeException and Error are known as checked exceptions e.g. IOException, SQLException etc. 
	Checked exceptions are checked at compile-time.

	2. Unchecked Exception-The classes which inherit RuntimeException are known as unchecked exceptions e.g. ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException etc. 
	Unchecked exceptions are not checked at compile-time, but they are checked at runtime.

	3. Error-Error is irrecoverable e.g. OutOfMemoryError, VirtualMachineError, AssertionError etc.

Java Exception Keywords

	1. try-The "try" keyword is used to specify a block where we should place exception code. The try block must be followed by either catch or finally. It means, we can't use try 
	block alone.

	2. catch-The "catch" block is used to handle the exception. It must be preceded by try block which means we can't use catch block alone. It can be followed by finally block later.

	3. finally-The "finally" block is used to execute the important code of the program. It is executed whether an exception is handled or not.

	4. throw-The "throw" keyword is used to throw an exception.

	5. throws-The "throws" keyword is used to declare exceptions. It doesn't throw an exception. It specifies that there may occur an exception in the method. It is always used with
	a method signature.

Exception Hierarchy

	All exception and errors types are sub classes of class Throwable, which is base class of hierarchy.One branch is headed by Exception. This class is used for exceptional 
	conditions that user programs should catch. NullPointerException is an example of such an exception. Another branch,Error are used by the Java run-time system(JVM) to indicate
	errors having to do with the run-time environment itself(JRE). StackOverflowError is an example of such an error.

How JVM handle an Exception?

	 Whenever inside a method, if an exception has occurred, the method creates an Object known as Exception Object and hands it off to the run-time system(JVM). 
	 The exception object contains name and description of the exception, and current state of the program where exception has occurred. Creating the Exception Object and 
	 handling it to the run-time system is called throwing an Exception.There might be the list of the methods that had been called to get to the method where exception was 
	 occurred. This ordered list of the methods is called Call Stack.Now the following procedure will happen.
	 	
	 	1.The run-time system searches the call stack to find the method that contains block of code that can handle the occurred exception. The block of the code is called 
	 	Exception handler.
		
		2.The run-time system starts searching from the method in which exception occurred, proceeds through call stack in the reverse order in which methods were called.
		
		3.If it finds  appropriate handler then it passes the occurred exception to it. Appropriate handler means the type of the exception object thrown matches the type of 
		the exception object it can handle.
		
		4.If run-time system searches all the methods on call stack and couldn’t have found the appropriate handler then run-time system hand over the Exception Object to default 
		exception handler , which is part of run-time system. This handler prints the exception information in the following format and terminates program abnormally.
		
How Programmer handles an exception?

	Java exception handling is managed via five keywords: try, catch, throw, throws, and finally. Briefly, here is how they work. Program statements that you think can raise 
	exceptions are contained within a try block. If an exception occurs within the try block, it is thrown. Your code can catch this exception (using catch block) and handle
	it in some rational manner. System-generated exceptions are automatically thrown by the Java run-time system. To manually throw an exception, use the keyword throw. Any 
	exception that is thrown out of a method must be specified as such by a throws clause. Any code that absolutely must be executed after a try block completes is put in a
	finally block.

Control flow in try-catch OR try-catch-finally

	Case 1:Exception occurs in try block and handled in catch block
		If a statement in try block raised an exception, then the rest of the try block doesn’t execute and control passes to the corresponding catch block. After executing catch 
		block, the control will be transferred to finally block(if present) and then rest program will be executed.
		
	Case 2:Exception occurred in try-block is not handled in catch block
		In this case, default handling mechanism is followed. If finally block is present, it will be executed followed by default handling mechanism.
		
	Case 3:Exception doesn’t occur in try-block
		In this case catch block never runs as they are only meant to be run when an exception occurs. finally block(if present) will be executed followed by rest of the program.

Control flow in try-finally
	
	Case 1:Exception raised
		If exception has been occurred in try block  then control flow will be finally block followed by default exception handling mechanism.
	
	Case 2:Exception not raised
		If exception is not occurred in try block then control flow will be finally block followed by rest of the program.
		
Built-In Exception

	1.Arithmetic Exception
	2.ArrayIndexOutOfBoundException
	3.ClassNotFoundException
	4.FileNotFoundException
	5.IOException
	6.InterruptedException
	7.NoSuchFieldException
	8.NoSuchMethodException
	9.NullPointerException
	10.NumberFormatException
	11.RuntimeException
	12.StringIndexOutOfBoundsException
	
User-Defined Exceptions
	
	Sometimes, the built-in exceptions in Java are not able to describe a certain situation. In such cases, user can also create exceptions which are called ‘user-defined 
	Exceptions’.

	Following steps are followed for the creation of user-defined Exception:
		
		The user should create an exception class as a subclass of Exception class. Since all the exceptions are subclasses of Exception class, the user should also make his class
		a subclass of it. This is done as:
			'''class MyException extends Exception'''
		
		We can write a default constructor in his own exception class.
			'''MyException(){}'''
			
		We can also create a parameterized constructor with a string as a parameter.We can use this to store exception details. We can call super class(Exception) constructor 
		from this and send the string there.	
			'''MyException(String str)
				{super(str);
				}'''
		
		To raise exception of user-defined type, we need to create an object to his exception class and throw it using throw clause, as:
			'''MyException me = new MyException(“Exception details”);
			throw me;'''
		
	